<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_S_mouse</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Store the original position
original_x = x;
original_y = y;

// Initialize dragging state
is_dragging = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Start dragging if the left mouse button is pressed over this object
if (mouse_check_button_pressed(mb_left) &amp;&amp; position_meeting(mouse_x, mouse_y, id)) {
    is_dragging = true;  // Start dragging
}

// While dragging, follow the mouse cursor
if (is_dragging) {
    x = mouse_x;
    y = mouse_y;
}

// Stop dragging when the left mouse button is released
if (mouse_check_button_released(mb_left) &amp;&amp; is_dragging) {
    is_dragging = false;  // Stop dragging

    // Check if the drop zone (ob_box_A) exists
    if (instance_exists(ob_box_S_mouse)) {
        // Get the nearest ob_box_A instance
        var box = instance_nearest(x, y, ob_box_S_mouse);

        // Define a larger drop area around the box
        var drop_area_width = 100;  // Adjust as needed
        var drop_area_height = 100;

        // Check if the center of this object is within the larger drop area
        if (x &gt; box.x - drop_area_width / 2 &amp;&amp;
            x &lt; box.x + drop_area_width / 2 &amp;&amp;
            y &gt; box.y - drop_area_height / 2 &amp;&amp;
            y &lt; box.y + drop_area_height / 2) {
            // Snap the letter to the drop box position
            x = box.x;
            y = box.y;
            if (ob_O_mouse.is_O_mouse_placed) {
                instance_create(room_width / 2, room_height / 2, ob_check_icon);
            } else {
            
                x = original_x;
                y = original_y;
                instance_create(room_width / 2, room_height / 2, ob_wrong);
                
            }
            // Show a big check icon in the middle of the screen
            //instance_create(room_width / 2, room_height / 2, ob_check_icon);
            //show_message("Benar!");  // Feedback for correct placement
        } else {
            // Return to the original position if not dropped in the correct zone
            x = original_x;
            y = original_y;
            instance_create(room_width / 2, room_height / 2, ob_wrong);
            //show_message("Salah Coba Lagi Ya!");  // Feedback for incorrect placement
        }
    } else {
        // If ob_box_A doesn't exist, return to original position
        x = original_x;
        y = original_y;
        show_message("Drop box Tidak Ditemukan!");  // Debug feedback
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
